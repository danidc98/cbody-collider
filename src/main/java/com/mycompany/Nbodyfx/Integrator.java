/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.Nbodyfx;

import static com.mycompany.Nbodyfx.Body.myClone;
import static com.mycompany.Nbodyfx.Calculations.h;
import static com.mycompany.Nbodyfx.Calculations.updateR;
import static com.mycompany.Nbodyfx.Calculations.updateV;
import java.util.ArrayList;

/** Genera el integrador escogido por el usuario en la GUI de la aplicación App.
 *
 * @author Daniel del Canto
 */
public enum Integrator {
    

    /**
     * Stormer-Verlet 2o-orden
     * https://github.com/m4r35n357/JavaNBody/blob/master/src/main/java/uk/me/doitto/orbits/Symplectic.java
     */
    STORMER_VERLET_2 {
        @Override
        protected void init() {
            double[] coefficients = new double[1];
            Integrator.coefficients = new double[1];
            coefficients[0] = 1.0;
            Integrator.coefficients = coefficients;
        }

        /**
         * Avanza un paso temporal con el integrador configurado.
         *
         * @param galaxia objeto de clase Galaxia cuyos cuerpos verán sus
         * posiciones y velocidades modificadas por el integrador simpléctico
         * escogido.
         *
         */
        @Override
        protected void solve(Galaxy galaxy) {
            int tmp = coefficients.length - 1;
            for (int i = 0; i < tmp; i++) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);

            }
            for (int i = tmp; i >= 0; i--) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);
            }

            galaxy.time += h;
        }

    },
    /**
     * Yoshida 4o-orden
     */
    STORMER_VERLET_4 {
        @Override
        protected void init() {
            double CUBE_ROOT_2 = Math.pow(2.0, 1.0 / 3.0);
            double y = 1.0 / (2.0 - CUBE_ROOT_2);
            double[] coefficients = new double[2];
            Integrator.coefficients = new double[2];
            coefficients[0] = y;
            coefficients[1] = -y * CUBE_ROOT_2;
            Integrator.coefficients = coefficients;
        }

        /**
         * Avanza un paso temporal con el integrador configurado.
         *
         * @param galaxia objeto de clase Galaxia cuyos cuerpos verán sus
         * posiciones y velocidades modificadas por el integrador simpléctico
         * escogido.
         *
         */
        @Override
        protected void solve(Galaxy galaxy) {
            int tmp = coefficients.length - 1;
            for (int i = 0; i < tmp; i++) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);

            }
            for (int i = tmp; i >= 0; i--) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);
            }

            galaxy.time += h;

        }

    },
    /**
     * Yoshida 6o-orden
     */
    STORMER_VERLET_6 {
        @Override
        protected void init() {
            double[] coefficients = new double[4];
            Integrator.coefficients = new double[4];
            coefficients[0] = 0.78451361047755726381949763;
            coefficients[1] = 0.23557321335935813368479318;
            coefficients[2] = -1.17767998417887100694641568;
            coefficients[3] = 1.31518632068391121888424973;

            Integrator.coefficients = coefficients;

        }

        /**
         * Avanza un paso temporal con el integrador configurado.
         *
         * @param galaxia objeto de clase Galaxia cuyos cuerpos verán sus
         * posiciones y velocidades modificadas por el integrador simpléctico
         * escogido.
         *
         */
        @Override
        protected void solve(Galaxy galaxy) {
            int tmp = coefficients.length - 1;
            for (int i = 0; i < tmp; i++) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);

            }
            for (int i = tmp; i >= 0; i--) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);
            }
            galaxy.time += h;

        }

    },
    /**
     * Yoshida 8th-order
     */
    STORMER_VERLET_8 {
        @Override
        protected void init() {

            double[] coefficients = new double[8];
            Integrator.coefficients = new double[8];
            coefficients[0] = 0.74167036435061295344822780;
            coefficients[1] = -0.40910082580003159399730010;
            coefficients[2] = 0.19075471029623837995387626;
            coefficients[3] = -0.57386247111608226665638773;
            coefficients[4] = 0.29906418130365592384446354;
            coefficients[5] = 0.33462491824529818378495798;
            coefficients[6] = 0.31529309239676659663205666;
            coefficients[7] = -0.79688793935291635401978884;
            Integrator.coefficients = coefficients;

        }

        /**
         * Avanza un paso temporal con el integrador configurado.
         *
         * @param galaxia objeto de clase Galaxia cuyos cuerpos verán sus
         * posiciones y velocidades modificadas por el integrador simpléctico
         * escogido.
         *
         */
        @Override
        protected void solve(Galaxy galaxy) {
            int tmp = coefficients.length - 1;
            for (int i = 0; i < tmp; i++) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);

            }
            for (int i = tmp; i >= 0; i--) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);
            }

            galaxy.time += h;
        }

    },
    /**
     * Yoshida 10th-order
     */
    STORMER_VERLET_10 {
        @Override
        protected void init() {
            double[] coefficients = new double[17];
            Integrator.coefficients = new double[17];
            coefficients[0] = 0.09040619368607278492161150;
            coefficients[1] = 0.53591815953030120213784983;
            coefficients[2] = 0.35123257547493978187517736;
            coefficients[3] = -0.31116802097815835426086544;
            coefficients[4] = -0.52556314194263510431065549;
            coefficients[5] = 0.14447909410225247647345695;
            coefficients[6] = 0.02983588609748235818064083;
            coefficients[7] = 0.17786179923739805133592238;
            coefficients[8] = 0.09826906939341637652532377;
            coefficients[9] = 0.46179986210411860873242126;
            coefficients[10] = -0.33377845599881851314531820;
            coefficients[11] = 0.07095684836524793621031152;
            coefficients[12] = 0.23666960070126868771909819;
            coefficients[13] = -0.49725977950660985445028388;
            coefficients[14] = -0.30399616617237257346546356;
            coefficients[15] = 0.05246957188100069574521612;
            coefficients[16] = 0.44373380805019087955111365;
            Integrator.coefficients = coefficients;

        }

        @Override
        protected void solve(Galaxy galaxy) {
            int tmp = coefficients.length - 1;
            for (int i = 0; i < tmp; i++) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);

            }
            for (int i = tmp; i >= 0; i--) {
                sympBase(galaxy.bhtree.bodies, coefficients[i]);
            }

            galaxy.time += h;
        }

    },
    RUNGE_KUTTA_NYSTROM_8 {
        @Override
        protected void init() {
            g = new double[13];
            g[0] = 0.0;
            g[1] = 0.60715821186110352503;
            g[2] = 0.96907291059136392378;
            g[3] = -0.10958316365513620399;
            g[4] = 0.05604981994113413605;
            g[5] = 1.30886529918631234010;
            g[6] = -0.11642101198009154794;
            g[7] = -0.2993124599473964831;
            g[8] = -0.16586962790248628655;
            g[9] = 1.22007054181677755238;
            g[10] = 0.20549254689579093228;
            g[11] = 0.86890893813102759275;
            g[12] = 1.0;
            b = new double[13];
            beta = new double[13];
            for (int i = 1; i < 12; i++) {
                b[i] = (g[i + 1] - g[i - 1]) * 0.5;
            }
            b[0] = g[1] / 2.0;
            b[12] = (1 - g[11]) / 2.0;
            for (int i = 0; i < 13; i++) {
                beta[i] = b[i] * (1 - g[i]);
            }
            alfaij = new double[g.length][g.length];

            for (int i = 0; i < g.length; i++) {
                for (int j = 0; j < g.length; j++) {
                    if (j >= i) {
                        alfaij[i][j] = 0.0;
                        continue;

                    }
                    alfaij[i][j] = b[j] * (g[i] - g[j]);
                }

            }

        }

        @Override
        public void solve(Galaxy galaxy) {
            rkn(galaxy);
        }

    },
    RUNGE_KUTTA_12 {

        @Override
        protected void init() {
            c = new double[25];
            c[0] = 0.0238095238095238095238095238095238095238095238095238095238095;
            c[1] = 0.0234375000000000000000000000000000000000000000000000000000000;
            c[2] = 0.0312500000000000000000000000000000000000000000000000000000000;
            c[3] = 0.000000000000000000000000000000000000000000000000000000000000;
            c[4] = 0.0416666666666666666666666666666666666666666666666666666666667;
            c[5] = 0.000000000000000000000000000000000000000000000000000000000000;
            c[6] = 0.0500000000000000000000000000000000000000000000000000000000000;
            c[7] = 0.0500000000000000000000000000000000000000000000000000000000000;
            c[8] = 0.000000000000000000000000000000000000000000000000000000000000;
            c[9] = 0.100000000000000000000000000000000000000000000000000000000000;
            c[10] = 0.0714285714285714285714285714285714285714285714285714285714286;
            c[11] = 0.000000000000000000000000000000000000000000000000000000000000;
            c[12] = 0.138413023680782974005350203145033146748813640089941234591267;
            c[13] = 0.215872690604931311708935511140681138965472074195773051123019;
            c[14] = 0.243809523809523809523809523809523809523809523809523809523810;
            c[15] = 0.215872690604931311708935511140681138965472074195773051123019;
            c[16] = 0.138413023680782974005350203145033146748813640089941234591267;
            c[17] = -0.0714285714285714285714285714285714285714285714285714285714286;
            c[18] = -0.100000000000000000000000000000000000000000000000000000000000;
            c[19] = -0.0500000000000000000000000000000000000000000000000000000000000;
            c[20] = -0.0500000000000000000000000000000000000000000000000000000000000;
            c[21] = -0.0416666666666666666666666666666666666666666666666666666666667;
            c[22] = -0.0312500000000000000000000000000000000000000000000000000000000;
            c[23] = -0.0234375000000000000000000000000000000000000000000000000000000;
            c[24] = 0.0238095238095238095238095238095238095238095238095238095238095;
            betaij = new double[25][25];
            betaij[1][0] = 0.200000000000000000000000000000000000000000000000000000000000;
            betaij[2][0] = -0.216049382716049382716049382716049382716049382716049382716049;
            betaij[2][1] = 0.771604938271604938271604938271604938271604938271604938271605;
            betaij[3][0] = 0.208333333333333333333333333333333333333333333333333333333333;
            betaij[3][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[3][2] = 0.625000000000000000000000000000000000000000000000000000000000;
            betaij[4][0] = 0.193333333333333333333333333333333333333333333333333333333333;
            betaij[4][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[4][2] = 0.220000000000000000000000000000000000000000000000000000000000;
            betaij[4][3] = -0.080000000000000000000000000000000000000000000000000000000000;
            betaij[5][0] = 0.100000000000000000000000000000000000000000000000000000000000;
            betaij[5][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[5][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[5][3] = 0.400000000000000000000000000000000000000000000000000000000000;
            betaij[5][4] = 0.500000000000000000000000000000000000000000000000000000000000;
            betaij[6][0] = 0.103364471650010477570395435690481791543342708330349879244197;
            betaij[6][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[6][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[6][3] = 0.124053094528946761061581889237115328211074784955180298044074;
            betaij[6][4] = 0.483171167561032899288836480451962508724109257517289177302380;
            betaij[6][5] = -0.0387530245694763252085681443767620580395733302341368038804290;
            betaij[7][0] = 0.124038261431833324081904585980175168140024670698633612292480;
            betaij[7][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[7][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[7][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[7][4] = 0.217050632197958486317846256953159942875916353757734167684657;
            betaij[7][5] = 0.0137455792075966759812907801835048190594443990939408530842918;
            betaij[7][6] = -0.0661095317267682844455831341498149531672668252085016565917546;
            betaij[8][0] = 0.0914774894856882983144991846980432197088832099976660100090486;
            betaij[8][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[8][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[8][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[8][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[8][5] = -0.00544348523717469689965754944144838611346156873847009178068318;
            betaij[8][6] = 0.0680716801688453518578515120895103863112751730758794372203952;
            betaij[8][7] = 0.408394315582641046727306852653894780093303185664924644551239;
            betaij[9][0] = 0.0890013652502551018954509355423841780143232697403434118692699;
            betaij[9][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[9][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[9][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[9][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[9][5] = 0.00499528226645532360197793408420692800405891149406814091955810;
            betaij[9][6] = 0.397918238819828997341739603001347156083435060931424970826304;
            betaij[9][7] = 0.427930210752576611068192608300897981558240730580396406312359;
            betaij[9][8] = -0.0865117637557827005740277475955029103267246394128995965941585;
            betaij[10][0] = 0.0695087624134907543112693906409809822706021061685544615255758;
            betaij[10][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[10][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[10][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[10][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[10][5] = 0.129146941900176461970759579482746551122871751501482634045487;
            betaij[10][6] = 1.53073638102311295076342566143214939031177504112433874313011;
            betaij[10][7] = 0.577874761129140052546751349454576715334892100418571882718036;
            betaij[10][8] = -0.951294772321088980532340837388859453930924498799228648050949;
            betaij[10][9] = -0.408276642965631951497484981519757463459627174520978426909934;
            betaij[11][0] = 0.0444861403295135866269453507092463581620165501018684152933313;
            betaij[11][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[11][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[11][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[11][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[11][5] = -0.00380476867056961731984232686574547203016331563626856065717964;
            betaij[11][6] = 0.0106955064029624200721262602809059154469206077644957399593972;
            betaij[11][7] = 0.0209616244499904333296674205928919920806734650660039898074652;
            betaij[11][8] = -0.0233146023259321786648561431551978077665337818756053603898847;
            betaij[11][9] = 0.00263265981064536974369934736325334761174975280887405725010964;
            betaij[11][10] = 0.00315472768977025060103545855572111407955208306374459723959783;
            betaij[12][0] = 0.0194588815119755475588801096525317761242073762016273186231215;
            betaij[12][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[12][8] = 0.0000678512949171812509306121653452367476194364781259165332321534;
            betaij[12][9] = -0.0000429795859049273623271005330230162343568863387724883603675550;
            betaij[12][10] = 0.0000176358982260285155407485928953302139937553442829975734148981;
            betaij[12][11] = 0.0653866627415027051009595231385181033549511358787382098351924;
            betaij[13][0] = 0.206836835664277105916828174798272361078909196043446411598231;
            betaij[13][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[13][8] = 0.0166796067104156472828045866664696450306326505094792505215514;
            betaij[13][9] = -0.00879501563200710214457024178249986591130234990219959208704979;
            betaij[13][10] = 0.00346675455362463910824462315246379209427513654098596403637231;
            betaij[13][11] = -0.861264460105717678161432562258351242030270498966891201799225;
            betaij[13][12] = 0.908651882074050281096239478469262145034957129939256789178785;
            betaij[14][0] = 0.0203926084654484010091511314676925686038504449562413004562382;
            betaij[14][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[14][8] = 0.0869469392016685948675400555583947505833954460930940959577347;
            betaij[14][9] = -0.0191649630410149842286436611791405053287170076602337673587681;
            betaij[14][10] = 0.00655629159493663287364871573244244516034828755253746024098838;
            betaij[14][11] = 0.0987476128127434780903798528674033899738924968006632201445462;
            betaij[14][12] = 0.00535364695524996055083260173615567408717110247274021056118319;
            betaij[14][13] = 0.301167864010967916837091303817051676920059229784957479998077;
            betaij[15][0] = 0.228410433917778099547115412893004398779136994596948545722283;
            betaij[15][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[15][8] = -0.498707400793025250635016567442511512138603770959682292383042;
            betaij[15][9] = 0.134841168335724478552596703792570104791700727205981058201689;
            betaij[15][10] = -0.0387458244055834158439904226924029230935161059142806805674360;
            betaij[15][11] = -1.27473257473474844240388430824908952380979292713250350199641;
            betaij[15][12] = 1.43916364462877165201184452437038081875299303577911839630524;
            betaij[15][13] = -0.214007467967990254219503540827349569639028092344812795499026;
            betaij[15][14] = 0.958202417754430239892724139109781371059908874605153648768037;
            betaij[16][0] = 2.00222477655974203614249646012506747121440306225711721209798;
            betaij[16][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[16][8] = 2.06701809961524912091954656438138595825411859673341600679555;
            betaij[16][9] = 0.623978136086139541957471279831494466155292316167021080663140;
            betaij[16][10] = -0.0462283685500311430283203554129062069391947101880112723185773;
            betaij[16][11] = -8.84973288362649614860075246727118949286604835457092701094630;
            betaij[16][12] = 7.74257707850855976227437225791835589560188590785037197433615;
            betaij[16][13] = -0.588358519250869210993353314127711745644125882130941202896436;
            betaij[16][14] = -1.10683733362380649395704708016953056176195769617014899442903;
            betaij[16][15] = -0.929529037579203999778397238291233214220788057511899747507074;
            betaij[17][0] = 3.13789533412073442934451608989888796808161259330322100268310;
            betaij[17][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[17][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[17][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[17][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[17][5] = 0.129146941900176461970759579482746551122871751501482634045487;
            betaij[17][6] = 1.53073638102311295076342566143214939031177504112433874313011;
            betaij[17][7] = 0.577874761129140052546751349454576715334892100418571882718036;
            betaij[17][8] = 5.42088263055126683050056840891857421941300558851862156403363;
            betaij[17][9] = 0.231546926034829304872663800877643660904880180835945693836936;
            betaij[17][10] = 0.0759292995578913560162301311785251873561801342333194895292058;
            betaij[17][11] = -12.3729973380186513287414553402595806591349822617535905976253;
            betaij[17][12] = 9.85455883464769543935957209317369202080367765721777101906955;
            betaij[17][13] = 0.0859111431370436529579357709052367772889980495122329601159540;
            betaij[17][14] = -5.65242752862643921117182090081762761180392602644189218673969;
            betaij[17][15] = -1.94300935242819610883833776782364287728724899124166920477873;
            betaij[17][16] = -0.128352601849404542018428714319344620742146491335612353559923;
            betaij[18][0] = 1.38360054432196014878538118298167716825163268489922519995564;
            betaij[18][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[18][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[18][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[18][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[18][5] = 0.00499528226645532360197793408420692800405891149406814091955810;
            betaij[18][6] = 0.397918238819828997341739603001347156083435060931424970826304;
            betaij[18][7] = 0.427930210752576611068192608300897981558240730580396406312359;
            betaij[18][8] = -1.30299107424475770916551439123047573342071475998399645982146;
            betaij[18][9] = 0.661292278669377029097112528107513072734573412294008071500699;
            betaij[18][10] = -0.144559774306954349765969393688703463900585822441545655530145;
            betaij[18][11] = -6.96576034731798203467853867461083919356792248105919255460819;
            betaij[18][12] = 6.65808543235991748353408295542210450632193197576935120716437;
            betaij[18][13] = -1.66997375108841486404695805725510845049807969199236227575796;
            betaij[18][14] = 2.06413702318035263832289040301832647130604651223986452170089;
            betaij[18][15] = -0.674743962644306471862958129570837723192079875998405058648892;
            betaij[18][16] = -0.00115618834794939500490703608435907610059605754935305582045729;
            betaij[18][17] = -0.00544057908677007389319819914241631024660726585015012485938593;
            betaij[19][0] = 0.951236297048287669474637975894973552166903378983475425758226;
            betaij[19][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[19][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[19][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[19][4] = 0.217050632197958486317846256953159942875916353757734167684657;
            betaij[19][5] = 0.0137455792075966759812907801835048190594443990939408530842918;
            betaij[19][6] = -0.0661095317267682844455831341498149531672668252085016565917546;
            betaij[19][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[19][8] = 0.152281696736414447136604697040747131921486432699422112099617;
            betaij[19][9] = -0.337741018357599840802300793133998004354643424457539667670080;
            betaij[19][10] = -0.0192825981633995781534949199286824400469353110630787982121133;
            betaij[19][11] = -3.68259269696866809932409015535499603576312120746888880201882;
            betaij[19][12] = 3.16197870406982063541533528419683854018352080342887002331312;
            betaij[19][13] = -0.370462522106885290716991856022051125477943482284080569177386;
            betaij[19][14] = -0.0514974200365440434996434456698127984941168616474316871020314;
            betaij[19][15] = -0.000829625532120152946787043541792848416659382675202720677536554;
            betaij[19][16] = 0.00000279801041419278598986586589070027583961355402640879503213503;
            betaij[19][17] = 0.0418603916412360287969841020776788461794119440689356178942252;
            betaij[19][18] = 0.279084255090877355915660874555379649966282167560126269290222;
            betaij[20][0] = 0.103364471650010477570395435690481791543342708330349879244197;
            betaij[20][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][3] = 0.124053094528946761061581889237115328211074784955180298044074;
            betaij[20][4] = 0.483171167561032899288836480451962508724109257517289177302380;
            betaij[20][5] = -0.0387530245694763252085681443767620580395733302341368038804290;
            betaij[20][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][7] = -0.438313820361122420391059788940960176420682836652600698580091;
            betaij[20][8] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][9] = -0.218636633721676647685111485017151199362509373698288330593486;
            betaij[20][10] = -0.0312334764394719229981634995206440349766174759626578122323015;
            betaij[20][11] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][12] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][13] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][14] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][15] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][16] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[20][17] = 0.0312334764394719229981634995206440349766174759626578122323015;
            betaij[20][18] = 0.218636633721676647685111485017151199362509373698288330593486;
            betaij[20][19] = 0.438313820361122420391059788940960176420682836652600698580091;
            betaij[21][0] = 0.193333333333333333333333333333333333333333333333333333333333;
            betaij[21][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][2] = 0.220000000000000000000000000000000000000000000000000000000000;
            betaij[21][3] = -0.0800000000000000000000000000000000000000000000000000000000000;
            betaij[21][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][6] = 0.0984256130499315928152900286856048243348202521491288575952143;
            betaij[21][7] = -0.196410889223054653446526504390100417677539095340135532418849;
            betaij[21][8] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][9] = 0.436457930493068729391826122587949137609670676712525034763317;
            betaij[21][10] = 0.0652613721675721098560370939805555698350543810708414716730270;
            betaij[21][11] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][12] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][13] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][14] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][15] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][16] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[21][17] = -0.0652613721675721098560370939805555698350543810708414716730270;
            betaij[21][18] = -0.436457930493068729391826122587949137609670676712525034763317;
            betaij[21][19] = 0.196410889223054653446526504390100417677539095340135532418849;
            betaij[21][20] = -0.0984256130499315928152900286856048243348202521491288575952143;
            betaij[22][0] = -0.216049382716049382716049382716049382716049382716049382716049;
            betaij[22][1] = 0.771604938271604938271604938271604938271604938271604938271605;
            betaij[22][2] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][4] = -0.666666666666666666666666666666666666666666666666666666666667;
            betaij[22][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][6] = -0.390696469295978451446999802258495981249099665294395945559163;
            betaij[22][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][8] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][9] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][10] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][11] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][12] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][13] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][14] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][15] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][16] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][17] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][18] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][19] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[22][20] = 0.390696469295978451446999802258495981249099665294395945559163;
            betaij[22][21] = 0.666666666666666666666666666666666666666666666666666666666667;
            betaij[23][0] = 0.200000000000000000000000000000000000000000000000000000000000;
            betaij[23][1] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][2] = -0.164609053497942386831275720164609053497942386831275720164609;
            betaij[23][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][4] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][6] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][7] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][8] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][9] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][10] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][11] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][12] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][13] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][14] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][15] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][16] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][17] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][18] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][19] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][20] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][21] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[23][22] = 0.164609053497942386831275720164609053497942386831275720164609;
            betaij[24][0] = 1.47178724881110408452949550989023611293535315518571691939396;
            betaij[24][1] = 0.787500000000000000000000000000000000000000000000000000000000;
            betaij[24][2] = 0.421296296296296296296296296296296296296296296296296296296296;

            betaij[24][3] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[24][4] = 0.291666666666666666666666666666666666666666666666666666666667;
            betaij[24][5] = 0.000000000000000000000000000000000000000000000000000000000000;
            betaij[24][6] = 0.348600717628329563206854421629657569274689947367847465753757;
            betaij[24][7] = 0.229499544768994849582890233710555447073823569666506700662510;
            betaij[24][8] = 5.79046485790481979159831978177003471098279506036722411333192;
            betaij[24][9] = 0.418587511856506868874073759426596207226461447604248151080016;
            betaij[24][10] = 0.307039880222474002649653817490106690389251482313213999386651;
            betaij[24][11] = -4.68700905350603332214256344683853248065574415794742040470287;
            betaij[24][12] = 3.13571665593802262152038152399873856554395436199962915429076;
            betaij[24][13] = 1.40134829710965720817510506275620441055845017313930508348898;
            betaij[24][14] = -5.52931101439499023629010306005764336421276055777658156400910;
            betaij[24][15] = -0.853138235508063349309546894974784906188927508039552519557498;
            betaij[24][16] = 0.103575780373610140411804607167772795518293914458500175573749;
            betaij[24][17] = -0.140474416950600941142546901202132534870665923700034957196546;
            betaij[24][18] = -0.418587511856506868874073759426596207226461447604248151080016;
            betaij[24][19] = -0.229499544768994849582890233710555447073823569666506700662510;
            betaij[24][20] = -0.348600717628329563206854421629657569274689947367847465753757;
            betaij[24][21] = -0.291666666666666666666666666666666666666666666666666666666667;
            betaij[24][22] = -0.421296296296296296296296296296296296296296296296296296296296;
            betaij[24][23] = -0.787500000000000000000000000000000000000000000000000000000000;

        }

        protected void solve(Galaxy galaxy) {
            rk(galaxy);

        }

    },
    RUNGE_KUTTA_4 {
        @Override
        public void init() {
            c = new double[4];
            betaij = new double[4][4];
            betaij[1][0] = 0.5;
            betaij[2][0] = 0.0;
            betaij[2][1] = 0.5;
            betaij[3][0] = 0.0;
            betaij[3][1] = 0.0;
            betaij[3][2] = 1.0;
            c[0] = 1.0/6.0;
            c[1] = 1.0/3.0;
            c[2] = 1.0/3.0;
            c[2] = 1.0/6.0;

        }

        @Override
        protected void solve(Galaxy galaxy) {
            rk(galaxy);
        }

    };

    protected static double[] coefficients;
    static double[] g, c;
    static double[] b;
    static double[][] alfaij, betaij;
    static double[] beta;

    public static double[] getCoefficients() {
        return coefficients;
    }

    /**
     * Método de integración de segundo orden simpléctico de Stormer-Verlet Si
     * se compone consigo mismo, sirve para obtener integradores de orden
     * superior.
     *
     * @param galaxy, conjunto de cuerpos cuyas posiciones y velocidades van a
     * ser actualizadas mediante el integrador simpléctico.
     * @param y, paso temporal.
     */
    protected static final void sympBase(ArrayList<Body> galaxy, double y) {
        double halfY = 0.5 * y;
        updateR(galaxy, halfY);
        updateV(galaxy, y);
        updateR(galaxy, halfY);
    }

    /**
     * init: Inicializa el método de integración seleccionado entre los objetos
     * de la enumeración. Esto significa que se crearán los coeficientes
     * asociados a ese integrador.
     */
    protected abstract void init();

    /**
     * Avanza un paso temporal con el integrador configurado.
     *
     * @param galaxy objeto de clase Galaxia cuyos cuerpos verán sus posiciones
     * y velocidades modificadas por el integrador simpléctico escogido.
     *
     */
    protected abstract void solve(Galaxy galaxy);

    /**
     * Método de Runge-Kutta-Nyström general de orden k
     *
     * @param galaxy galaxia cuyos cuerpos evolucionarán tras un paso de tiempo
     * h
     */
    protected void rkn(Galaxy galaxy) {
        int N = galaxy.bhtree.bodies.size();
        v3D[] rn = new v3D[N];
        v3D[] vn = new v3D[N];
        v3D[] rnext = new v3D[N];
        v3D[] vnext = new v3D[N];
        v3D[][] f = new v3D[b.length][N];
        v3D[] Y = new v3D[N];
        int i = 0;
        BHTree bhtree;
        ArrayList<Body> bodies = myClone(galaxy.bhtree.bodies);

        for (Body body : galaxy.bhtree.bodies) {

            rn[i] = galaxy.bhtree.bodies.get(i).position.myClone();
            vn[i] = galaxy.bhtree.bodies.get(i).speed.myClone();
            rnext[i] = rn[i].add(vn[i].product(h));
            vnext[i] = vn[i].myClone();
            i++;
        }
        Body body;
        for (int j = 0; j < b.length; j++) {

            bhtree = new BHTree(bodies);

            for (int k = 0; k < N; k++) {

                f[j][k] = bhtree.BH(bodies.get(k), Calculations.theta);
                rnext[k] = rnext[k].add(f[j][k].product(h * h * beta[j]));
                vnext[k] = vnext[k].add(f[j][k].product(h * b[j]));

                if (j != b.length - 1) {
                    Y[k] = rn[k].add(vn[k].product(h * g[j]));

                    for (int l = 0; l < j + 1; l++) {

                        Y[k] = Y[k].add(f[l][k].product(h * h * alfaij[j + 1][l]));

                    }
                    bodies.get(k).position = Y[k];
                }

            }

        }
        for (int j = 0; j < N; j++) {
            body = galaxy.bhtree.bodies.get(j);
            body.setPosition(rnext[j]);
            body.speed = vnext[j];

        }
        galaxy.time += h;

    }

    /**
     * Avance temporal de los cuerpos de una galaxia mediante un método general
     * de Runge-Kutta con un paso de tamaño h.
     *
     * @param galaxy Galaxia formada por cuerpos con posiciones y velocidades
     * iniciales.
     */
    protected void rk(Galaxy galaxy) {
        int N = galaxy.bhtree.bodies.size();
        v3D[] rn = new v3D[N];
        v3D[] vn = new v3D[N];
        v3D[] rnext = new v3D[N];
        v3D[] vnext = new v3D[N];
        v3D[][] f = new v3D[c.length][2 * N];
        v3D[] Y = new v3D[N];
        v3D acc;
        int i = 0;
        BHTree bhtree;
        ArrayList<Body> bodies = myClone(galaxy.bhtree.bodies);

        for (Body body : galaxy.bhtree.bodies) {

            rn[i] = body.position.myClone();
            vn[i] = body.speed.myClone();
            rnext[i] = rn[i].myClone();
            vnext[i] = vn[i].myClone();
            i++;
        }
        Body body;
        for (int j = 0; j < c.length; j++) {

            bhtree = new BHTree(bodies);//Construímos el árbol en cada nuevo punto de evaluación.

            for (int k = 0; k < N; k++) {

                f[j][k] = bhtree.BH(bodies.get(k), Calculations.theta);
                f[j][k + N] = vn[k];

                rnext[k] = rnext[k].add(f[j][k + N].product(h * c[j]));
                vnext[k] = vnext[k].add(f[j][k].product(h * c[j]));

                rn[k] = galaxy.bhtree.bodies.get(k).position.myClone();
                //    vn[k] = galaxy.bhtree.bodies.get(k).speed.myClone();

                if (j != c.length - 1) {
                    for (int l = 0; l < j + 1; l++) {

                        rn[k] = rn[k].add(f[l][k + N].product(h * betaij[j + 1][l]));
                        // vn[k] = vn[k].add(f[l][k].product(h * betaij[j + 1][l]));

                    }

                    bodies.get(k).position = rn[k];

                }
            }

        }
        for (int j = 0; j < N; j++) {
            body = galaxy.bhtree.bodies.get(j);
            body.setPosition(rnext[j]);
            body.speed = vnext[j];

        }
        galaxy.time += h;

    }

}
